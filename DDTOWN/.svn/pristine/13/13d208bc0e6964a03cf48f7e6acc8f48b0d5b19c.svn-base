package kr.or.ddit.ddtown.controller;

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.ddtown.service.IUserService;
import kr.or.ddit.vo.user.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/auth")
public class DDWTWRegisterController {

	@Autowired
	private IUserService userService;
	
	@GetMapping("/form")
	public String registerForm(Model model) {
		model.addAttribute("bodyText", "register-page");
		return "auth/register";
	}
	
	@ResponseBody
	@PostMapping("/idCheck")
	public ResponseEntity<String> idCheck(@RequestBody Map<String, String> param) {
		log.info("idCheck 실행!");
		String username = param.get("username");
		
		ServiceResult result = userService.idCheck(username);
		return new ResponseEntity<String>(result.toString(),HttpStatus.OK);
	}
	@ResponseBody
	@PostMapping("/nickCheck")
	public ResponseEntity<String> nickCheck(@RequestBody Map<String, String> param) {
		log.info("idCheck 실행!");
		String memNicknm = param.get("memNicknm");
		
		ServiceResult result = userService.nickCheck(memNicknm);
		return new ResponseEntity<String>(result.toString(),HttpStatus.OK);
	}
	@ResponseBody
	@PostMapping("/emailCheck")
	public ResponseEntity<String> emailCheck(@RequestBody Map<String, String> param) {
		log.info("idCheck 실행!");
		String peoEmail = param.get("peoEmail");
		
		ServiceResult result = userService.emailCheck(peoEmail);
		return new ResponseEntity<String>(result.toString(),HttpStatus.OK);
	}
	
	@Transactional
	@PostMapping("/signup.do")
	public String register(MemberVO memberVO, Model model, RedirectAttributes ra) {
		log.info("register->memberVO : {}",memberVO);
		String path = "";
		Map<String, String> errors = new HashMap<>();
		if(StringUtils.isBlank(memberVO.getUsername())) {
			errors.put("username", "아이디를 입력해주세요!");
		}
		if(StringUtils.isBlank(memberVO.getPassword())) {
			errors.put("password", "비밀번호를 입력해주세요!");
		}
		if(StringUtils.isBlank(memberVO.getPeoLastNm())) {
			errors.put("peoLastNm", "성을 입력해주세요!");
		}
		if(StringUtils.isBlank(memberVO.getPeoFirstNm())) {
			errors.put("peoFirstNm", "이름을 입력해주세요!");
		}
		if(StringUtils.isBlank(memberVO.getMemNicknm())) {
			errors.put("memNicknm", "닉네임을 입력해주세요!");
		}
		if(StringUtils.isBlank(memberVO.getPeoEmail())) {
			errors.put("peoEmail", "이메일을 입력해주세요!");
		}
		if(StringUtils.isBlank(memberVO.getPeoPhone())) {
			errors.put("peoPhone", "전화번호를 입력해주세요!");
		}
		if(errors.size() > 0) {
			model.addAttribute("error", errors);
			return "auth/register";
		}
		
		
		ServiceResult result = userService.register(memberVO);
		if(ServiceResult.OK.equals(result)) {
			ra.addFlashAttribute("msg", "회원가입되셨습니다. 로그인을 진행해주세요!");
			path = "redirect:/login";
		}else {
			model.addAttribute("memberVO",memberVO);
			path = "auth/register";
		}
		return path;
	}
	
	
}
